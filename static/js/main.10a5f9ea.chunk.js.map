{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","findUser","param","usersFromServer","find","preparedTodos","userId","App","useState","setTodos","setTitle","hasTitleError","setHasTitleError","currentUserId","setCurrentUserId","hasCurrentUserIdError","setHasCurrentUserIdError","maxId","sort","a","b","action","method","onSubmit","e","preventDefault","newPost","prevState","type","value","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"4OAOaA,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpC,OACEA,GAEE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKG,OAA7C,SACGH,EAAKI,QCHDC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjC,0BACE,UAASA,EAAKC,GACdN,UAAWO,IAAG,WAAY,CACxB,sBAAuBF,EAAKG,YAHhC,UAOE,oBAAIR,UAAU,kBAAd,SACGK,EAAKI,QAGR,cAAC,EAAD,CAAUV,KAAMM,EAAKN,WCbZW,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjC,yBAASX,UAAU,WAAnB,SACGW,EAAMC,KAAI,SAAAP,GACT,OACE,cAAC,EAAD,CAEEA,KAAMA,GADDA,EAAKC,UCbL,GACb,CACEA,GAAI,EACJH,KAAM,gBACNU,SAAU,OACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,eACNU,SAAU,YACVX,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,sBAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,WACVX,MAAO,6BAET,CACEI,GAAI,EACJH,KAAM,mBACNU,SAAU,SACVX,MAAO,4BAET,CACEI,GAAI,EACJH,KAAM,uBACNU,SAAU,mBACVX,MAAO,2BAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,eACVX,MAAO,0BAET,CACEI,GAAI,EACJH,KAAM,2BACNU,SAAU,gBACVX,MAAO,wBAET,CACEI,GAAI,EACJH,KAAM,kBACNU,SAAU,WACVX,MAAO,2BAET,CACEI,GAAI,GACJH,KAAM,qBACNU,SAAU,iBACVX,MAAO,2BClDLY,EAAW,SAACC,GAChB,OAAOC,EACJC,MAAK,SAAAlB,GAAI,OAAIA,EAAKO,KAAOS,MACvB,MAGDG,ECfS,CACb,CACEZ,GAAI,EACJG,MAAO,qBACPD,WAAW,EACXW,OAAQ,GAEV,CACEb,GAAI,GACJG,MAAO,kBACPD,WAAW,EACXW,OAAQ,GAEV,CACEb,GAAI,EACJG,MAAO,qCACPD,WAAW,EACXW,OAAQ,IDF0BP,KAAI,SAAAP,GACxC,IAAMN,EAAOe,EAAST,EAAKc,QAE3B,OAAO,2BACFd,GADL,IAEEN,YAISqB,EAAU,WACrB,MAA0BC,mBAASH,GAAnC,mBAAOP,EAAP,KAAcW,EAAd,KAEA,EAA0BD,mBAAS,IAAnC,mBAAOZ,EAAP,KAAcc,EAAd,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAA0CJ,mBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA0DN,oBAAS,GAAnE,mBAAOO,EAAP,KAA8BC,EAA9B,KAEMC,EAAQnB,EAAMC,KAAI,SAACP,GAAD,OAAUA,EAAKC,MAAIyB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAAG,GA+CjE,OACE,sBAAKhC,UAAU,MAAf,UACE,+CAEA,uBACEkC,OAAO,aACPC,OAAO,OACPC,SA1CkB,SAACC,GAGvB,GAFAA,EAAEC,kBAEG7B,IAAUiB,EAIb,OAHAD,GAAkBD,QAClBK,GAA0BD,GAK5B,GAAKnB,EAML,GAAKiB,EAAL,CAMA,IAAMa,EAAU,CACdjC,GAAIwB,EAAQ,EACZrB,QACAU,OAAQO,EACRlB,WAAW,EACXT,KAAMe,EAASY,IAGjBJ,GAAS,SAAAkB,GAAS,4BAAQA,GAAR,CAAmBD,OACrChB,EAAS,IACTI,EAAiB,QAffE,GAA0BD,QAN1BH,GAAkBD,IA4BlB,UAKE,sBAAKxB,UAAU,QAAf,UACE,uBACEyC,KAAK,OACL,UAAQ,aACRC,MAAOjC,EACPkC,SAtDa,SAACN,GACtBd,EAASc,EAAEO,OAAOF,OAClBjB,GAAiB,IAqDToB,YAAY,qBAEbrB,GACI,sBAAMxB,UAAU,QAAhB,qCAIP,sBAAKA,UAAU,QAAf,UACE,yBACE,UAAQ,aACR0C,MAAOhB,EACPiB,SAvEqB,SAACN,GAC9BV,GAAkBU,EAAEO,OAAOF,OAC3Bb,GAAyB,IAkEnB,UAKE,wBACEiB,UAAQ,EACRJ,MAAO,EAFT,2BAMC1B,EAAgBJ,KAAI,SAAAb,GAAI,OACvB,wBACE2C,MAAO3C,EAAKO,GADd,SAIGP,EAAKI,MAFDJ,EAAKO,UAOfsB,GACI,sBAAM5B,UAAU,QAAhB,qCAGP,wBAAQyC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU9B,MAAOA,QElIvBoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.10a5f9ea.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User | null,\n}\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  return (\n    user\n    && (\n      <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n        {user.name}\n      </a>\n    )\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoInfo: FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => {\n      return (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      );\n    })}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC, useState } from 'react';\n\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst findUser = (param: number) => {\n  return usersFromServer\n    .find(user => user.id === param)\n    || null;\n};\n\nconst preparedTodos = todosFromServer.map(todo => {\n  const user = findUser(todo.userId);\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState(preparedTodos);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [hasCurrentUserIdError, setHasCurrentUserIdError] = useState(false);\n\n  const maxId = todos.map((todo) => todo.id).sort((a, b) => b - a)[0];\n\n  const handleUserSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setCurrentUserId(+e.target.value);\n    setHasCurrentUserIdError(false);\n  };\n\n  const handleOnInput = ((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setHasTitleError(false);\n  });\n\n  const handleOnSubmit = ((e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!title && !currentUserId) {\n      setHasTitleError(!hasTitleError);\n      setHasCurrentUserIdError(!hasCurrentUserIdError);\n\n      return;\n    }\n\n    if (!title) {\n      setHasTitleError(!hasTitleError);\n\n      return;\n    }\n\n    if (!currentUserId) {\n      setHasCurrentUserIdError(!hasCurrentUserIdError);\n\n      return;\n    }\n\n    const newPost = {\n      id: maxId + 1,\n      title,\n      userId: currentUserId,\n      completed: false,\n      user: findUser(currentUserId),\n    };\n\n    setTodos(prevState => [...prevState, newPost]);\n    setTitle('');\n    setCurrentUserId(0);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleOnSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleOnInput}\n            placeholder=\"Enter post title\"\n          />\n          {hasTitleError\n            && <span className=\"error\">Please enter a title</span>}\n\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={currentUserId}\n            onChange={handleUserSelectChange}\n          >\n            <option\n              disabled\n              value={0}\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasCurrentUserIdError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}